# TODO: Separar en dos dockerfile, dev sin multistage, prod si. 
#TODO: not-super-root-user
FROM ruby:3.0.0-alpine as builder
ARG RAILS_ROOT=/usr/src/app
ENV NODE_ENV=production RAILS_ENV=production
ARG PACKAGES="bash build-base nodejs sqlite-dev tzdata postgresql-dev yarn"
WORKDIR ${RAILS_ROOT}
RUN apk add --update --no-cache $PACKAGES && \
    gem install bundler:2.2.9

COPY yarn.lock Gemfile* package.json  ./
RUN NODE_ENV=production yarn install

RUN bundle config --local deployment true && \
    bundle config --local without "development test assets" && \
    bundle config --local path /var/www/app/shared/bundle && \
    bundle install --quiet --jobs 4

COPY . ./

#RUN bin/rails webpacker:compile
#RUN bin/rails assets:precompile
#RUN rm -rf node_modules tmp/cache app/assets vendor/assets spec
# ************ DEV STAGE **************
FROM builder as dev
ARG RAILS_ROOT=/usr/src/app
ENV RAILS_ENV=development RAILS_LOG_TO_STDOUT=true
WORKDIR ${RAILS_ROOT}
RUN bundle config --delete without && \
    bundle config --delete with &&  \
    bundle install --quiet --jobs 4

CMD [ "sh", "-c", "bundle exec rake db:create db:migrate && bundle exec rails server -b 0.0.0.0" ]
# ************ PROD STAGE **************
# FROM ruby:3.0.0-slim as prod
# ENV NODE_ENV=production RAILS_ENV=production
# ENV RAILS_LOG_TO_STDOUT=true
# RUN apt-get update -qq && apt-get install -y libpq-dev nodejs \
#     && apt-get clean && rm -rf /var/lib/apt/lists/*
# RUN mkdir /app
# WORKDIR /app

# COPY --from=builder /app/app /app/app
# COPY --from=builder /app/config /app/config
# COPY --from=builder /app/bin /app/bin
# COPY --from=builder /app/db /app/db
# COPY --from=builder /app/lib /app/lib
# COPY --from=builder /app/storage /app/storage
# COPY --from=builder /app/vendor /app/vendor
# COPY --from=builder /app/public /app/public
# COPY --from=builder /app/Gemfile /app/Gemfile* /app/
# CMD [ "sh", "-c", "bundle exec rake db:create db:migrate && bundle exec rails server -b 0.0.0.0" ]
# ************ PROD STAGE**************
# FROM ruby:3.0.0-alpine as prod
# ARG RAILS_ROOT=/usr/src/app
# ARG PACKAGES="tzdata postgresql-client nodejs bash"
# ENV RAILS_ENV=production RAILS_LOG_TO_STDOUT=true
# ENV BUNDLE_APP_CONFIG="$RAILS_ROOT/.bundle"
# WORKDIR $RAILS_ROOT
# RUN apk update \
#     && apk upgrade \
#     && apk add --update --no-cache $PACKAGES
# COPY --from=builder $RAILS_ROOT $RAILS_ROOT
# EXPOSE 3000
# CMD ["rails", "server", "-b", "0.0.0.0"]